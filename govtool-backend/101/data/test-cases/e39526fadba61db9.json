{"uid":"e39526fadba61db9","name":"test_check_voting_power[ada_holder_delegate_to_drep1]","fullName":"test_cases.test_ada_holder#test_check_voting_power","historyId":"d1864dc3d70d71b744593af394018825","time":{"start":1738086187994,"stop":1738086188105,"duration":111},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7fb022504590>\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <link rel=\"icon\" type=\"image/svg+xml\" ...n        s.parentNode.insertBefore(g, s);\\n      })();\\n    </script>\\n    <div id=\"root\"></div>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\ngovtool_api = <lib.govtool_api.GovToolApi object at 0x7fb020d72e90>\nada_holder_delegate_to_drep = {'dRepId': 'ecaad9d12e9af29bc4c62769a824be0bfbe82460e879c047f61d5dd3', 'stakeKey': 'b3990e29f482a698e38d245bd0422568d0574e6c659cb3921d32cdae'}\n\n    @allure.story(\"AdaHolder\")\n    def test_check_voting_power(govtool_api, ada_holder_delegate_to_drep):\n        response = govtool_api.ada_holder_get_voting_power(ada_holder_delegate_to_drep[\"stakeKey\"])\n>       ada_holder_voting_power = response.json()\n\ntest_cases/test_ada_holder.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/requests/models.py:978: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"govtool_api","time":{"start":1738086187189,"stop":1738086187189,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"ada_holder_delegate_to_drep","time":{"start":1738086187865,"stop":1738086187865,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"ada_holder_delegate_to_drep::0","time":{"start":1738086188126,"stop":1738086188126,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"govtool_api::0","time":{"start":1738086190423,"stop":1738086190423,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"AdaHolder"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_ada_holder"},{"name":"host","value":"fv-az1369-754"},{"name":"thread","value":"1957-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_ada_holder"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"ada_holder_delegate_to_drep","value":"{'drepId': 'ecaad9d12e9af29bc4c62769a824be0bfbe82460e879c047f61d5dd3', 'stakeKey': 'b3990e29f482a698e38d245bd0422568d0574e6c659cb3921d32cdae'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":7,"broken":3,"skipped":0,"passed":91,"unknown":0,"total":101},"items":[{"uid":"5107780a8fb12873","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/100//#testresult/5107780a8fb12873","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1738070982571,"stop":1738070982729,"duration":158}},{"uid":"12e2d5faeaf6859e","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/99//#testresult/12e2d5faeaf6859e","status":"broken","statusDetails":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","time":{"start":1738064728864,"stop":1738064729029,"duration":165}},{"uid":"faa4cbff6477408e","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/98//#testresult/faa4cbff6477408e","status":"passed","time":{"start":1738058566748,"stop":1738058567243,"duration":495}},{"uid":"2c2567a5a6d90250","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/97//#testresult/2c2567a5a6d90250","status":"passed","time":{"start":1738056731110,"stop":1738056731259,"duration":149}},{"uid":"4b18b1cd280812b1","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/96//#testresult/4b18b1cd280812b1","status":"passed","time":{"start":1738055240782,"stop":1738055240910,"duration":128}},{"uid":"d090f27b712d6f1a","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/95//#testresult/d090f27b712d6f1a","status":"passed","time":{"start":1738054123765,"stop":1738054124133,"duration":368}},{"uid":"967c55c9e4461bec","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/94//#testresult/967c55c9e4461bec","status":"failed","statusDetails":"AssertionError: Expected GET/ada-holder/get-voting-power to succeed but got statusCode:500 : body:Something went wrong","time":{"start":1738000351712,"stop":1738000351841,"duration":129}},{"uid":"f386720d95136842","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/93//#testresult/f386720d95136842","status":"failed","statusDetails":"AssertionError: Expected GET/ada-holder/get-voting-power to succeed but got statusCode:500 : body:Something went wrong","time":{"start":1737996573074,"stop":1737996573260,"duration":186}},{"uid":"621012f2e960e153","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/92//#testresult/621012f2e960e153","status":"passed","time":{"start":1737990467618,"stop":1737990467765,"duration":147}},{"uid":"b6ec4871fa0e6e00","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/91//#testresult/b6ec4871fa0e6e00","status":"passed","time":{"start":1737739329680,"stop":1737739329813,"duration":133}},{"uid":"69c03754a8d6f7a9","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/90//#testresult/69c03754a8d6f7a9","status":"passed","time":{"start":1737734064903,"stop":1737734065034,"duration":131}},{"uid":"4afce7b29b0929c7","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/89//#testresult/4afce7b29b0929c7","status":"failed","statusDetails":"AssertionError: Expected GET/ada-holder/get-voting-power to succeed but got statusCode:500 : body:Something went wrong","time":{"start":1737727701541,"stop":1737727701671,"duration":130}},{"uid":"961e953221bd47a","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/88//#testresult/961e953221bd47a","status":"failed","statusDetails":"AssertionError: Expected GET/ada-holder/get-voting-power to succeed but got statusCode:500 : body:Something went wrong","time":{"start":1737726935871,"stop":1737726936003,"duration":132}},{"uid":"3f2b71476b885335","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/87//#testresult/3f2b71476b885335","status":"failed","statusDetails":"AssertionError: Expected GET/ada-holder/get-voting-power to succeed but got statusCode:500 : body:Something went wrong","time":{"start":1737723018362,"stop":1737723018477,"duration":115}},{"uid":"8cbb77d942c6c068","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/86//#testresult/8cbb77d942c6c068","status":"failed","statusDetails":"AssertionError: Expected GET/ada-holder/get-voting-power to succeed but got statusCode:500 : body:Something went wrong","time":{"start":1737706095340,"stop":1737706095686,"duration":346}},{"uid":"4d47ba5cfaf669a3","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/85//#testresult/4d47ba5cfaf669a3","status":"passed","time":{"start":1737634647480,"stop":1737634647670,"duration":190}},{"uid":"98ab59ef9c973b2c","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/84//#testresult/98ab59ef9c973b2c","status":"passed","time":{"start":1737574819070,"stop":1737574819246,"duration":176}},{"uid":"f29cb7f16fc7947","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/83//#testresult/f29cb7f16fc7947","status":"passed","time":{"start":1737372127902,"stop":1737372128026,"duration":124}},{"uid":"fa96c12feeb47e02","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/82//#testresult/fa96c12feeb47e02","status":"passed","time":{"start":1737019940582,"stop":1737019940716,"duration":134}},{"uid":"9246553abf768aae","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/81//#testresult/9246553abf768aae","status":"passed","time":{"start":1736517618933,"stop":1736517619052,"duration":119}}]},"tags":[]},"source":"e39526fadba61db9.json","parameterValues":["{'drepId': 'ecaad9d12e9af29bc4c62769a824be0bfbe82460e879c047f61d5dd3', 'stakeKey': 'b3990e29f482a698e38d245bd0422568d0574e6c659cb3921d32cdae'}"]}