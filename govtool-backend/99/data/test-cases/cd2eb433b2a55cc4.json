{"uid":"cd2eb433b2a55cc4","name":"test_get_epoch_param","fullName":"test_cases.test_misc#test_get_epoch_param","historyId":"21c850556083f20bb9569c0a3fbeb03c","time":{"start":1738064730393,"stop":1738064730552,"duration":159},"status":"broken","statusMessage":"requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"self = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x7f828e511c90>\ns = '<!DOCTYPE html>\\n<html lang=\"en\">\\n  <head>\\n    <meta charset=\"UTF-8\" />\\n    <link rel=\"icon\" type=\"image/svg+xml\" ...n        s.parentNode.insertBefore(g, s);\\n      })();\\n    </script>\\n    <div id=\"root\"></div>\\n  </body>\\n</html>\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/json/decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\ngovtool_api = <lib.govtool_api.GovToolApi object at 0x7f828e972d90>\n\n    @allure.story(\"Misc\")\n    def test_get_epoch_param(govtool_api):\n>       epoch_param: EpochParam = govtool_api.epoch_params().json()\n\ntest_cases/test_misc.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [200]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/opt/hostedtoolcache/Python/3.11.4/x64/lib/python3.11/site-packages/requests/models.py:978: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":true,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"govtool_api","time":{"start":1738064727857,"stop":1738064727857,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"govtool_api::0","time":{"start":1738064732009,"stop":1738064732009,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"story","value":"Misc"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_misc"},{"name":"host","value":"fv-az1979-41"},{"name":"thread","value":"2005-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_misc"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":1,"skipped":0,"passed":96,"unknown":0,"total":99},"items":[{"uid":"c543de408271bf16","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/98//#testresult/c543de408271bf16","status":"passed","time":{"start":1738058628818,"stop":1738058629704,"duration":886}},{"uid":"f3052cd1ae9c8904","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/97//#testresult/f3052cd1ae9c8904","status":"passed","time":{"start":1738056792169,"stop":1738056792269,"duration":100}},{"uid":"8b7c571f2a36e6d2","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/96//#testresult/8b7c571f2a36e6d2","status":"passed","time":{"start":1738055662108,"stop":1738055662223,"duration":115}},{"uid":"abd988c838e33435","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/95//#testresult/abd988c838e33435","status":"passed","time":{"start":1738054126517,"stop":1738054126627,"duration":110}},{"uid":"b1603953685f1755","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/94//#testresult/b1603953685f1755","status":"passed","time":{"start":1738000354168,"stop":1738000354441,"duration":273}},{"uid":"c9ee569d21a449c0","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/93//#testresult/c9ee569d21a449c0","status":"passed","time":{"start":1737996636674,"stop":1737996636990,"duration":316}},{"uid":"81416cc9fbcece95","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/92//#testresult/81416cc9fbcece95","status":"passed","time":{"start":1737990469905,"stop":1737990470181,"duration":276}},{"uid":"64d5577bea960b67","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/91//#testresult/64d5577bea960b67","status":"passed","time":{"start":1737739331950,"stop":1737739332219,"duration":269}},{"uid":"f1bcd0ad92734bee","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/90//#testresult/f1bcd0ad92734bee","status":"passed","time":{"start":1737734067081,"stop":1737734067350,"duration":269}},{"uid":"4149b3755025a181","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/89//#testresult/4149b3755025a181","status":"passed","time":{"start":1737727703961,"stop":1737727704238,"duration":277}},{"uid":"8d259974561b1ce4","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/88//#testresult/8d259974561b1ce4","status":"passed","time":{"start":1737726938221,"stop":1737726938489,"duration":268}},{"uid":"2cd3aff7d5d2c7b4","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/87//#testresult/2cd3aff7d5d2c7b4","status":"passed","time":{"start":1737723020572,"stop":1737723020828,"duration":256}},{"uid":"d8d0d4ca4cd1a4d5","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/86//#testresult/d8d0d4ca4cd1a4d5","status":"passed","time":{"start":1737706096634,"stop":1737706096745,"duration":111}},{"uid":"2beb66e0b680f4dc","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/85//#testresult/2beb66e0b680f4dc","status":"passed","time":{"start":1737634650056,"stop":1737634650387,"duration":331}},{"uid":"efc39637cbc3fc8b","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/84//#testresult/efc39637cbc3fc8b","status":"passed","time":{"start":1737574821641,"stop":1737574821961,"duration":320}},{"uid":"9e8b9f589398d340","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/83//#testresult/9e8b9f589398d340","status":"passed","time":{"start":1737372130241,"stop":1737372130551,"duration":310}},{"uid":"da9b14fbf81149ee","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/82//#testresult/da9b14fbf81149ee","status":"passed","time":{"start":1737019942769,"stop":1737019943044,"duration":275}},{"uid":"bb340f6e18964242","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/81//#testresult/bb340f6e18964242","status":"passed","time":{"start":1736517620806,"stop":1736517621066,"duration":260}},{"uid":"6fb47497c86e7d06","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/80//#testresult/6fb47497c86e7d06","status":"passed","time":{"start":1736259907154,"stop":1736259907477,"duration":323}},{"uid":"7323442a3327dbad","reportUrl":"https://IntersectMBO.github.io/govtool-test-reports/govtool-backend/79//#testresult/7323442a3327dbad","status":"passed","time":{"start":1735647772184,"stop":1735647772500,"duration":316}}]},"tags":[]},"source":"cd2eb433b2a55cc4.json","parameterValues":[]}